import time
from typing import Literal
from datetime import datetime
from functools import partial
from collections.abc import Iterable

import pandas as pd
import requests
import streamlit as st

from config import *

st.text_input = partial(st.text_input, label_visibility="collapsed")


def _get_results_name() -> str:
    return f"search_results_{datetime.now().strftime('%Y-%m-%d--%H-%M-%S')}"


def _write_as_list(input_data: Iterable) -> None:
    for item in input_data:
        st.markdown(f"* {item}")


def _call_api(
    url: str,
    request: dict = None,
    call_type: Literal["get", "post"] = "get",
) -> dict:
    if call_type == "get":
        response = requests.get(url)
    elif call_type == "post":
        response = requests.post(
            url,
            json=request,
            timeout=180,
        )
    else:
        raise ValueError(f"`call_type` should be 'get' or 'post', not `{call_type}`")
    if response.status_code != 200:
        st.error(f"error {response.status_code} {response.content}")
    return response.json()


def _parse_response(
    response: dict,
    show_id: bool = False,
    show_metrics: bool = False,
) -> pd.DataFrame:
    df = pd.DataFrame(response["items"])
    df.index = df.index + 1
    if not show_id:
        df.drop(columns=[col for col in df.columns if "_id" in col], inplace=True)
    if not show_metrics:
        df.drop(columns=METRICS, inplace=True)
    return df


def main():
    # Sidebar
    with st.sidebar:
        st.markdown(
            "# Big Ear + UniGoTo üë®‚Äçüéìüë©‚Äçüéì\n–° –ø–æ–º–æ—â—å—é –Ω–∞—à–µ–≥–æ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è —Ç—ã —Å–º–æ–∂–µ—à—å –ø–æ–¥–æ–±—Ä–∞—Ç—å —Å–µ–±–µ –ª—É—á—à–∏–π —É–Ω–∏–≤–µ—Ä—Å–∏—Ç–µ—Ç!\n"
        )
        with st.expander("–ü—Ä–æ–¥–≤–∏–Ω—É—Ç—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏"):
            limit = st.slider(
                "–õ–∏–º–∏—Ç –≤—ã–¥–∞—á–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤",
                min_value=1,
                max_value=50,
                value=20,
                step=1,
            )
            show_id = st.checkbox("–ü–æ–∫–∞–∑—ã–≤–∞—Ç—å id")
            show_metrics = st.checkbox("–ü–æ–∫–∞–∑—ã–≤–∞—Ç—å –º–µ—Ç—Ä–∏–∫–∏")
        with st.expander("–ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Ä–∞–±–æ—Ç—É API"):
            if st.button("Ping"):
                response = _call_api(ENDPOINT_PING)
                success = st.success(response["response"])
                time.sleep(1)
                success.empty()
        st.markdown("## –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è")
        with st.expander("–£—á–∞—Å—Ç–Ω–∏–∫–∏"):
            _write_as_list(CONTRIBUTORS_MD)
        with st.expander("–°—Å—ã–ª–∫–∏"):
            _write_as_list(LINKS_MD)
        with st.expander("–í–µ—Ä—Å–∏–∏"):
            _write_as_list(VERSIONS_MD)

    # User input
    st.markdown("## –†–∞—Å—Å–∫–∞–∂–∏ –Ω–∞–º –ø—Ä–æ —Å–µ–±—è")
    with st.expander("–ó–¥–µ—Å—å –Ω–∞—Ö–æ–¥—è—Ç—Å—è –ø–æ–ª—è –¥–ª—è –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è", expanded=True):
        auto_fill = st.checkbox("–ó–∞–ø–æ–ª–Ω–∏—Ç—å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏  / –æ—á–∏—Å—Ç–∏—Ç—å –ø–æ–ª—è")
        request = REQUEST_BODY.copy()
        for index, item in enumerate(USER_INPUT):
            st.markdown(f"##### {item['markdown']}")
            args = (f"{index}", item["example"]) if auto_fill else f"{index}"
            request[item["option"]] = st.text_input(*args)
    request["limit"] = limit

    # Analysis and results
    if st.button("–û—Ç–ø—Ä–∞–≤–∏—Ç—å –Ω–∞ –∞–Ω–∞–ª–∏–∑", use_container_width=True):
        with st.spinner("–û–±—Ä–∞–±–æ—Ç–∫–∞..."):
            response = _call_api(ENDPOINT_SEARCH, request, "post")
        if response["items"]:
            st.success("Done!")
            st.markdown("## –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –∞–Ω–∞–ª–∏–∑–∞")
            result_table = _parse_response(response, show_id, show_metrics)
            st.download_button(
                label="–°–∫–∞—á–∞—Ç—å —Ç–∞–±–ª–∏—Ü—É",
                data=result_table.to_csv().encode("utf-8"),
                file_name=f"{_get_results_name()}.csv",
                mime="text/csv",
                help="–í —Ñ–æ—Ä–º–∞—Ç–µ csv",
            )
            st.table(result_table)
        else:
            st.error("–†–µ–∑—É–ª—å—Ç–∞—Ç—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")


if __name__ == "__main__":
    st.set_page_config(page_title="–ü–æ–¥–±–æ—Ä —É–Ω–∏–≤–µ—Ä—Å–∏—Ç–µ—Ç–∞")
    main()
